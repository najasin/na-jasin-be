plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'checkstyle'
    id 'jacoco'
}

group = 'com.na-jasin'
version = '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

    jacoco {
        enabled = true
        destinationFile = file("${buildDir}/jacoco/${name}.exec")
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
}

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'


// checkstyle
tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = true
        html.required = true
    }
}

checkstyle {
    configFile = file("config/checkstyle/naver-checkstyle-rules.xml")
    configProperties = ["suppressionFile": "config/checkstyle/naver-checkstyle-suppressions.xml"]
    sourceSets = [sourceSets.main]
}

checkstyleMain.source = fileTree('src/main/java')

// jacoco
jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = false
        csv.required = false

        html.outputLocation = file("$buildDir/jacocoHtml")
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = "CLASS"

//            limit {
//                counter = "BRANCH"
//                value = "COVEREDRATIO"
//                minimum = 0.80
//            }

            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = 0.80
            }

            limit {
                counter = "METHOD"
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            excludes = [
                    '*.Application',
                    'com.najasin.config.**',
                    'com.najasin.domain.dto.**',
                    'com.najasin.domain.**.dto.**',
                    'com.najasin.domain.**.entity.**',
                    'com.najasin.domain.**.controller.**',
                    'com.najasin.global.**',
                    'com.najasin.security.**',
                    'com.najasin.domain.**.repository.**',
                    'com.najasin.global.**',
            ]
        }
    }
}

// QueryDsl
def generated = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDirs += [generated]
}

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

clean {
    delete file(generated)
}

repositories {
    mavenCentral()
}

dependencies {
    // Basic
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // AOP
    implementation 'org.springframework.boot:spring-boot-starter-aop:3.1.0'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // WebFlux
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-webflux', version: '3.1.0'

    // ORM
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // QueryDsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Database
    runtimeOnly 'com.h2database:h2'
    implementation 'mysql:mysql-connector-java:8.0.28'

    // S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // Test
    implementation 'junit:junit:4.13.1'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.findify:s3mock_2.13:0.2.6'
}